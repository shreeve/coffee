// Generated by CoffeeScript 2.8.0
import { Lexer } from './lexer.js';
import { parser } from './parser.js';
import * as helpers from './helpers.js';
import SourceMap from './sourcemap.js';
import Backend from './backend.js';
import * as nodesModule from './nodes.js';
import packageJson from '../../package.json' with { type: 'json' };



let VERSION = packageJson.version;

let FILE_EXTENSIONS = ['.coffee'];

let getSourceMap = SourceMap.getSourceMap;

let registerCompiled = SourceMap.registerCompiled;

const base64encode = function(src) {
  if (typeof Buffer === 'function') {
    return Buffer.from(src).toString('base64');
  } else {
    throw new Error('Unable to base64 encode inline sourcemap.');
  }
};

const withPrettyErrors = function(fn) {
  return function(code, options = {}) {
    try {
      return fn.call(this, code, options);
    } catch (error) {
      let err = error;
      if (typeof code !== 'string') {
        throw err;
      }
      throw helpers.updateSyntaxError(err, code, options.filename);
    }
  };
};

let compile = withPrettyErrors(function(code, options = {}) {
  options = Object.assign({}, options);
  let generateSourceMap = options.sourceMap || options.inlineMap || (options.filename == null);
  let filename = options.filename || helpers.anonymousFileName();
  checkShebangLine(filename, code);
  let map;
  if (generateSourceMap) {
    map = new SourceMap();
  }
  let tokens = lexer.tokenize(code, options);
  options.referencedVars = (function() {
    const results = []; /* FORCED_FIX */
/* DEFPART_MARKER */
    for (let j = 0, len = tokens.length; j < len; j++) {
      let token = tokens[j];
      if (token[0] === 'IDENTIFIER') {
        results.push(token[1]);
      }
    }
    return results;
  })();
  if (!((options.bare != null) && options.bare === true)) {
/* DEFPART_MARKER */
    for (let j = 0, len = tokens.length; j < len; j++) {
      let token = tokens[j];
      if ((ref = token[0]) === 'IMPORT' || ref === 'EXPORT') {
        options.bare = true;
        break;
      }
    }
  }
  parser.yy.backend = new Backend(options, parser.yy);
  let nodes = parser.parse(tokens);
  let sourceCodeNumberOfLines, sourceCodeLastLine, ast, range;
  if (options.ast) {
    nodes.allCommentTokens = helpers.extractAllCommentTokens(tokens);
    sourceCodeNumberOfLines = (code.match(/\r?\n/g) || '').length + 1;
    sourceCodeLastLine = /.*$/.exec(code)[0];
    ast = nodes.ast(options);
    range = [0, code.length];
    ast.start = ast.program.start = range[0];
    ast.end = ast.program.end = range[1];
    ast.range = ast.program.range = range;
    ast.loc.start = ast.program.loc.start = {
      line: 1,
      column: 0
    };
    ast.loc.end.line = ast.program.loc.end.line = sourceCodeNumberOfLines;
    ast.loc.end.column = ast.program.loc.end.column = sourceCodeLastLine.length;
    ast.tokens = tokens;
    return ast;
  }
  let fragments = nodes.compileToFragments(options);
  let currentLine = 0;
  if (options.header) {
    currentLine += 1;
  }
  if (options.shiftLine) {
    currentLine += 1;
  }
  let currentColumn = 0;
  let js = "";
/* DEFPART_MARKER */
  for (let k = 0, len1 = fragments.length; k < len1; k++) {
    let fragment = fragments[k];
    let newLines;
    if (generateSourceMap) {
      if (fragment.locationData && !/^[;\s]*$/.test(fragment.code)) {
        map.add([fragment.locationData.first_line, fragment.locationData.first_column], [currentLine, currentColumn], {
          noReplace: true
        });
      }
      newLines = helpers.count(fragment.code, "\n");
      currentLine += newLines;
      if (newLines) {
        currentColumn = fragment.code.length - (fragment.code.lastIndexOf("\n") + 1);
      } else {
        currentColumn += fragment.code.length;
      }
    }
    js += fragment.code;
  }
  let header;
  if (options.header) {
    header = `Generated by CoffeeScript ${VERSION}`;
    js = `// ${header}\n${js}`;
  }
  let v3SourceMap;
  if (generateSourceMap) {
    v3SourceMap = map.generate(options, code);
  }
  let encoded, sourceMapDataURI, sourceURL;
  if (options.inlineMap) {
    encoded = base64encode(JSON.stringify(v3SourceMap));
    sourceMapDataURI = `//# sourceMappingURL=data:application/json;base64,${encoded}`;
    sourceURL = `//# sourceURL=${filename}`;
    js = `${js}\n${sourceMapDataURI}\n${sourceURL}`;
  }
  registerCompiled(filename, code, map);
  if (options.sourceMap) {
    return {
      js,
      sourceMap: map,
      v3SourceMap: JSON.stringify(v3SourceMap, null, 2)
    };
  } else {
    return js;
  }
});

let tokens = withPrettyErrors(function(code, options) {
  return lexer.tokenize(code, options);
});

let nodes = withPrettyErrors(function(source, options) {
  if (typeof source === 'string') {
    source = lexer.tokenize(source, options);
  }
  parser.yy.backend = new Backend(options, parser.yy);
  return parser.parse(source);
});

let lexer = new Lexer();

parser.lexer = {
  yylloc: {
    range: []
  },
  options: {
    ranges: true
  },
  lex: function() {
    let token = parser.tokens[this.pos++];
    let tag;
    if (token) {
      [tag, this.yytext, this.yylloc] = token;
      parser.errorToken = token.origin || token;
      this.yylineno = this.yylloc.first_line;
    } else {
      tag = '';
    }
    return tag;
  },
  setInput: function(tokens) {
    parser.tokens = tokens;
    return this.pos = 0;
  },
  upcomingInput: function() {
    return '';
  }
};

parser.yy = {...nodesModule};

parser.yy.parseError = function(message, {token}) {
  ({
    errorToken,
    tokens: parserTokens
  } = parser);
  [errorTag, errorText, errorLoc] = errorToken;
  errorText = (function() {
    switch (false) {
      case errorToken !== parserTokens[parserTokens.length - 1]:
        return 'end of input';
      case errorTag !== 'INDENT' && errorTag !== 'OUTDENT':
        return 'indentation';
      case errorTag !== 'IDENTIFIER' && errorTag !== 'NUMBER' && errorTag !== 'INFINITY' && errorTag !== 'STRING' && errorTag !== 'STRING_START' && errorTag !== 'REGEX' && errorTag !== 'REGEX_START':
        return errorTag.replace(/_START$/, '').toLowerCase();
      default:
        return helpers.nameWhitespaceCharacter(errorText);
    }
  })();
  return helpers.throwSyntaxError(`unexpected ${errorText}`, errorLoc);
};

const patchStackTrace = function() {
  const formatSourcePosition = function(frame, getSourceMapping) {
    let filename = void 0;
    let fileLocation = '';
    let line, column, source;
    if (frame.isNative()) {
      fileLocation = "native";
    } else {
      if (frame.isEval()) {
        filename = frame.getScriptNameOrSourceURL();
        if (!filename) {
          fileLocation = `${frame.getEvalOrigin()}, `;
        }
      } else {
        filename = frame.getFileName();
      }
      filename || (filename = "<anonymous>");
      line = frame.getLineNumber();
      column = frame.getColumnNumber();
      source = getSourceMapping(filename, line, column);
      fileLocation = source ? `${filename}:${source[0]}:${source[1]}` : `${filename}:${line}:${column}`;
    }
    let functionName = frame.getFunctionName();
    let isConstructor = frame.isConstructor();
    let isMethodCall = !(frame.isToplevel() || isConstructor);
    let methodName, typeName, tp, as;
    if (isMethodCall) {
      methodName = frame.getMethodName();
      typeName = frame.getTypeName();
      if (functionName) {
        tp = as = '';
        if (typeName && functionName.indexOf(typeName)) {
          tp = `${typeName}.`;
        }
        if (methodName && functionName.indexOf(`.${methodName}`) !== functionName.length - methodName.length - 1) {
          as = ` [as ${methodName}]`;
        }
        return `${tp}${functionName}${as} (${fileLocation})`;
      } else {
        return `${typeName}.${methodName || '<anonymous>'} (${fileLocation})`;
      }
    } else if (isConstructor) {
      return `new ${functionName || '<anonymous>'} (${fileLocation})`;
    } else if (functionName) {
      return `${functionName} (${fileLocation})`;
    } else {
      return fileLocation;
    }
  };
  const getSourceMapping = function(filename, line, column) {
    let sourceMap = getSourceMap(filename, line, column);
    let answer;
    if (sourceMap != null) {
      answer = sourceMap.sourceLocation([line - 1, column - 1]);
    }
    if (answer != null) {
      return [answer[0] + 1, answer[1] + 1];
    } else {
      return null;
    }
  };
  return Error.prepareStackTrace = function(err, stack) {
    let frames = (function() {
      const results = []; /* FORCED_FIX */
/* DEFPART_MARKER */
      for (let i = j = 0, len = stack.length; j < len; i = ++j) {
        let frame = stack[i];
        if (i > 10) {
          break;
        }
        results.push(`    at ${formatSourcePosition(frame, getSourceMapping)}`);
      }
      return results;
    })();
    return `${err.toString()}\n${frames.join('\n')}\n`;
  };
};

const checkShebangLine = function(file, input) {
  let firstLine = input.split(/$/m, 1)[0];
  let rest = firstLine != null ? firstLine.match(/^#!\s*([^\s]+\s*)(.*)/) : void 0;
  let args = rest != null ? (ref = rest[2]) != null ? ref.split(/\s/).filter(function(s) {
    return s !== '';
  }) : void 0 : void 0;
  if ((args != null ? args.length : void 0) > 1) {
    console.error(`The script to be run begins with a shebang line with more than one
argument. This script will fail on platforms such as Linux which only
allow a single argument.`);
    console.error(`The shebang line was: '${firstLine}' in file '${file}'`);
    return console.error(`The arguments were: ${JSON.stringify(args)}`);
  }
};

let CoffeeScript = {VERSION, FILE_EXTENSIONS, compile, tokens, nodes, patchStackTrace, registerCompiled};


export default CoffeeScript;
export {
  VERSION,
  FILE_EXTENSIONS,
  compile,
  tokens,
  nodes,
  patchStackTrace,
  registerCompiled
};
