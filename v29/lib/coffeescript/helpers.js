// Generated by CoffeeScript 2.8.0


export const starts = function(string, literal, start) {
  return literal === string.substr(start, literal.length);
};

export const ends = function(string, literal, back) {
  const len = literal.length;
  return literal === string.substr(string.length - len - (back || 0), len);
};

export const repeat = function(str, n) {
  let res = '';
  while (n > 0) {
    if (n & 1) {
      res += str;
    }
    n >>>= 1;
    str += str;
  }
  return res;
};

export const compact = function(array) {
  results = [];
  for (let i = 0, len1 = array.length; i < len1; i++) {
    const item = array[i];
    if (item) {
      results.push(item);
    }
  }
  return results;
};

export const count = function(string, substr) {
  let num = pos = 0;
  if (!substr.length) {
    return 1 / 0;
  }
  while (pos = 1 + string.indexOf(substr, pos)) {
    num++;
  }
  return num;
};

export const merge = function(options, overrides) {
  return extend(extend({}, options), overrides);
};

export const extend = function(object, properties) {
  for (let key in properties) {
    const val = properties[key];
    object[key] = val;
  }
  return object;
};

export const flatten = function(array) {
  return array.flat(2e308);
};

export const del = function(obj, key) {
  const val = obj[key];
  delete obj[key];
  return val;
};

export const some = (ref = Array.prototype.some) != null ? ref : function(fn) {
  const ref1 = this;
  for (let i = 0, len1 = ref1.length; i < len1; i++) {
    const e = ref1[i];
    if (fn(e)) {
      return true;
    }
  }
  return false;
};

const buildLocationData = function(first, last) {
  if (!last) {
    return first;
  } else {
    return {
      first_line: first.first_line,
      first_column: first.first_column,
      last_line: last.last_line,
      last_column: last.last_column,
      last_line_exclusive: last.last_line_exclusive,
      last_column_exclusive: last.last_column_exclusive,
      range: [first.range[0], last.range[1]]
    };
  }
};

export const extractAllCommentTokens = function(tokens) {
  const allCommentsObj = {};
  for (let i = 0, len1 = tokens.length; i < len1; i++) {
    const token = tokens[i];
    if (token.comments) {
      const ref1 = token.comments;
      for (let j = 0, len2 = ref1.length; j < len2; j++) {
        const comment = ref1[j];
        const commentKey = comment.locationData.range[0];
        allCommentsObj[commentKey] = comment;
      }
    }
  }
  const sortedKeys = Object.keys(allCommentsObj).sort(function(a, b) {
    return a - b;
  });
  results = [];
  for (let k = 0, len3 = sortedKeys.length; k < len3; k++) {
    const key = sortedKeys[k];
    results.push(allCommentsObj[key]);
  }
  return results;
};

const buildLocationHash = function(loc) {
  return `${loc.range[0]}-${loc.range[1]}`;
};

export const buildTokenDataDictionary = function(tokens) {
  const tokenData = {};
  for (let i = 0, len1 = tokens.length; i < len1; i++) {
    const token = tokens[i];
    if (!token.comments) {
      continue;
    }
    const tokenHash = buildLocationHash(token[2]);
    if (tokenData[tokenHash] == null) {
      tokenData[tokenHash] = {};
    }
    if (token.comments) {
      ((base1 = tokenData[tokenHash]).comments != null ? base1.comments : base1.comments = []).push(...token.comments);
    }
  }
  return tokenData;
};

export const addDataToNode = function(parserState, firstLocationData, firstValue, lastLocationData, lastValue, forceUpdateLocation = true) {
  return function(obj) {
    const locationData = buildLocationData((ref1 = firstValue != null ? firstValue.locationData : void 0) != null ? ref1 : firstLocationData, (ref2 = lastValue != null ? lastValue.locationData : void 0) != null ? ref2 : lastLocationData);
    if (((obj != null ? obj.updateLocationDataIfMissing : void 0) != null) && (firstLocationData != null)) {
      obj.updateLocationDataIfMissing(locationData, forceUpdateLocation);
    } else {
      obj.locationData = locationData;
    }
    if (parserState.tokenData == null) {
      parserState.tokenData = buildTokenDataDictionary(parserState.parser.tokens);
    }
    if (obj.locationData != null) {
      const objHash = buildLocationHash(obj.locationData);
      if (((ref3 = parserState.tokenData[objHash]) != null ? ref3.comments : void 0) != null) {
        attachCommentsToNode(parserState.tokenData[objHash].comments, obj);
      }
    }
    return obj;
  };
};

export const attachCommentsToNode = function(comments, node) {
  if ((comments == null) || comments.length === 0) {
    return;
  }
  if (node.comments == null) {
    node.comments = [];
  }
  return node.comments.push(...comments);
};

export const locationDataToString = function(obj) {
  if (("2" in obj) && ("first_line" in obj[2])) {
    let locationData = obj[2];
  } else if ("first_line" in obj) {
    locationData = obj;
  }
  if (locationData) {
    return `${locationData.first_line + 1}:${locationData.first_column + 1}-` + `${locationData.last_line + 1}:${locationData.last_column + 1}`;
  } else {
    return "No location data";
  }
};

const anonymousFileName = (function() {
  let n = 0;
  n += 0;
  return function() {
    return `<anonymous-${n++}>`;
  };
})();

export {
  anonymousFileName
};

export const baseFileName = function(file, stripExt = false, useWinPathSep = false) {
  const pathSep = useWinPathSep ? /\\|\// : /\//;
  let parts = file.split(pathSep);
  file = parts[parts.length - 1];
  if (!(stripExt && file.indexOf('.') >= 0)) {
    return file;
  }
  parts = file.split('.');
  parts.pop();
  if (parts[parts.length - 1] === 'coffee' && parts.length > 1) {
    parts.pop();
  }
  return parts.join('.');
};

export const isCoffee = function(file) {
  return /\.coffee$/.test(file);
};

export const throwSyntaxError = function(message, location) {
  const error = new SyntaxError(message);
  error.location = location;
  error.toString = syntaxErrorToString;
  error.stack = error.toString();
  throw error;
};

export const updateSyntaxError = function(error, code, filename) {
  if (error.toString === syntaxErrorToString) {
    error.code || (error.code = code);
    error.filename || (error.filename = filename);
    error.stack = error.toString();
  }
  return error;
};

const syntaxErrorToString = function() {
  if (!(this.code && this.location)) {
    return Error.prototype.toString.call(this);
  }
  ({first_line, first_column, last_line, last_column} = this.location);
  if (last_line == null) {
    last_line = first_line;
  }
  if (last_column == null) {
    last_column = first_column;
  }
  if ((ref1 = this.filename) != null ? ref1.startsWith('<anonymous') : void 0) {
    let filename = '[stdin]';
  } else {
    filename = this.filename || '[stdin]';
  }
  let codeLine = this.code.split('\n')[first_line];
  const start = first_column;
  const end = first_line === last_line ? last_column + 1 : codeLine.length;
  let marker = codeLine.slice(0, start).replace(/[^\s]/g, ' ') + repeat('^', end - start);
  if (typeof process !== "undefined" && process !== null) {
    const colorsEnabled = ((ref2 = process.stdout) != null ? ref2.isTTY : void 0) && !((ref3 = process.env) != null ? ref3.NODE_DISABLE_COLORS : void 0);
  }
  if ((ref4 = this.colorful) != null ? ref4 : colorsEnabled) {
    const colorize = function(str) {
      return `\x1B[1;31m${str}\x1B[0m`;
    };
    codeLine = codeLine.slice(0, start) + colorize(codeLine.slice(start, end)) + codeLine.slice(end);
    marker = colorize(marker);
  }
  return `${filename}:${first_line + 1}:${first_column + 1}: error: ${this.message}
${codeLine}
${marker}`;
};

export const nameWhitespaceCharacter = function(string) {
  switch (string) {
    case ' ':
      return 'space';
    case '\n':
      return 'newline';
    case '\r':
      return 'carriage return';
    case '\t':
      return 'tab';
    default:
      return string;
  }
};

export const parseNumber = function(string) {
  if (string == null) {
    return 0/0;
  }
  const base = (function() {
    switch (string.charAt(1)) {
      case 'b':
        return 2;
      case 'o':
        return 8;
      case 'x':
        return 16;
      default:
        return null;
    }
  })();
  if (base != null) {
    return parseInt(string.slice(2).replace(/_/g, ''), base);
  } else {
    return parseFloat(string.replace(/_/g, ''));
  }
};

export const isFunction = function(obj) {
  return Object.prototype.toString.call(obj) === '[object Function]';
};

export const isNumber = function(obj) {
  return Object.prototype.toString.call(obj) === '[object Number]';
};

export const isString = function(obj) {
  return Object.prototype.toString.call(obj) === '[object String]';
};

export const isBoolean = function(obj) {
  return obj === true || obj === false || Object.prototype.toString.call(obj) === '[object Boolean]';
};

export const isPlainObject = function(obj) {
  return typeof obj === 'object' && !!obj && !Array.isArray(obj) && !isNumber(obj) && !isString(obj) && !isBoolean(obj);
};

const unicodeCodePointToUnicodeEscapes = function(codePoint) {
  const toUnicodeEscape = function(val) {
    const str = val.toString(16);
    return `\\u${repeat('0', 4 - str.length)}${str}`;
  };
  if (codePoint < 0x10000) {
    return toUnicodeEscape(codePoint);
  }
  const high = Math.floor((codePoint - 0x10000) / 0x400) + 0xD800;
  const low = (codePoint - 0x10000) % 0x400 + 0xDC00;
  return `${toUnicodeEscape(high)}${toUnicodeEscape(low)}`;
};

export const replaceUnicodeCodePointEscapes = function(str, {flags, error, delimiter = ''} = {}) {
  const shouldReplace = (flags != null) && indexOf.call(flags, 'u') < 0;
  return str.replace(UNICODE_CODE_POINT_ESCAPE, function(match, escapedBackslash, codePointHex, offset) {
    if (escapedBackslash) {
      return escapedBackslash;
    }
    const codePointDecimal = parseInt(codePointHex, 16);
    if (codePointDecimal > 0x10ffff) {
      error("unicode code point escapes greater than \\u{10ffff} are not allowed", {
        offset: offset + delimiter.length,
        length: codePointHex.length + 4
      });
    }
    if (!shouldReplace) {
      return match;
    }
    return unicodeCodePointToUnicodeEscapes(codePointDecimal);
  });
};

const UNICODE_CODE_POINT_ESCAPE = /(\\\\)|\\u\{([\da-fA-F]+)\}/g;
