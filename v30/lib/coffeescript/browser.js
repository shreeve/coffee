// Generated by CoffeeScript 2.8.0

let CoffeeScript, compile,
  indexOf = [].indexOf;

CoffeeScript = require('./coffeescript');

({compile} = CoffeeScript);

CoffeeScript.eval = (code, options = {}) => {
  let globalRoot;
  options.bare ??= true;
  globalRoot = typeof window !== "undefined" && window !== null ? window : global;
  return globalRoot['eval'](compile(code, options));
};

CoffeeScript.run = (code, options = {}) => {
  options.bare = true;
  options.shiftLine = true;
  return Function(compile(code, options))();
};

module.exports = CoffeeScript;

if (typeof window === "undefined" || window === null) {
  return;
}

if ((typeof btoa !== "undefined" && btoa !== null) && (typeof JSON !== "undefined" && JSON !== null)) {
  compile = (code, options = {}) => {
    options.inlineMap = true;
    return CoffeeScript.compile(code, options);
  };
}

CoffeeScript.load = (url, callback, options = {}, hold = false) => {
  let xhr;
  options.sourceFiles = [url];
  xhr = window.ActiveXObject ? new window.ActiveXObject('Microsoft.XMLHTTP') : new window.XMLHttpRequest();
  xhr.open('GET', url, true);
  if ('overrideMimeType' in xhr) {
    xhr.overrideMimeType('text/plain');
  }
  xhr.onreadystatechange = () => {
    let param, ref;
    if (xhr.readyState === 4) {
      if ((ref = xhr.status) === 0 || ref === 200) {
        param = [xhr.responseText, options];
        if (!hold) {
          CoffeeScript.run(...param);
        }
      } else {
        throw new Error(`Could not load ${url}`);
      }
      if (callback) {
        return callback(param);
      }
    }
  };
  return xhr.send(null);
};

CoffeeScript.runScripts = () => {
  let coffees, coffeetypes, execute, i, index, j, len, s, script, scripts;
  scripts = window.document.getElementsByTagName('script');
  coffeetypes = ['text/coffeescript'];
  coffees = (() => {
    let j, len, ref, results;
    results = [];
    for (j = 0, len = scripts.length; j < len; j++) {
      s = scripts[j];
      if (ref = s.type, indexOf.call(coffeetypes, ref) >= 0) {
        results.push(s);
      }
    }
    return results;
  })();
  index = 0;
  execute = () => {
    let param;
    param = coffees[index];
    if (param instanceof Array) {
      CoffeeScript.run(...param);
      index++;
      return execute();
    }
  };
  for (i = j = 0, len = coffees.length; j < len; i = ++j) {
    script = coffees[i];
    ((script, i) => {
      let options, source;
      options = {};
      source = script.src || script.getAttribute('data-src');
      if (source) {
        options.filename = source;
        return CoffeeScript.load(source, (param) => {
          coffees[i] = param;
          return execute();
        }, options, true);
      } else {
        options.filename = script.id && script.id !== '' ? script.id : `coffeescript${i !== 0 ? i : ''}`;
        options.sourceFiles = ['embedded'];
        return coffees[i] = [script.innerHTML, options];
      }
    })(script, i);
  }
  return execute();
};

if (this === window) {
  if (window.addEventListener) {
    window.addEventListener('DOMContentLoaded', CoffeeScript.runScripts, false);
  } else {
    window.attachEvent('onload', CoffeeScript.runScripts);
  }
}
