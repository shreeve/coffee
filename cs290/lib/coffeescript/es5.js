// Generated by CoffeeScript 2.7.0
(function() {
  // ==============================================================================
  // ES5 Backend - Solar Directive Processor for CoffeeScript
  // ==============================================================================

  // Converts Solar directives (pure data) to CoffeeScript AST node instances

  // Solar directives are generated by the parser from Solar syntax.coffee rules:
  //   o 'IDENTIFIER', $ast: 'IdentifierLiteral', value: 1

  // This backend converts those directives into actual CoffeeScript AST nodes:
  //   new nodes.IdentifierLiteral(tokenValue)

  // The resulting AST nodes use the existing CoffeeScript compiler pipeline.
  // ==============================================================================
  var ES5Backend,
    hasProp = {}.hasOwnProperty;

  ES5Backend = class ES5Backend {
    constructor(options = {}, ast = {}) {
      var ref, ref1;
      this.options = options;
      this.ast = ast;
      this.compileOptions = {
        bare: (ref = this.options.bare) != null ? ref : true,
        header: (ref1 = this.options.header) != null ? ref1 : false
      };
    }

    // Helper methods
    _stripQuotes(value) {
      if (!((value != null ? value.length : void 0) >= 2 && typeof value === 'string')) {
        return value;
      }
      if ((value[0] === '"' && value[value.length - 1] === '"') || (value[0] === "'" && value[value.length - 1] === "'")) {
        return value.slice(1, -1);
      } else {
        return value;
      }
    }

    reduce(values, positions, stackTop, symbolCount, directive) {
      var handler, lookup, o, prop, store, value;
      lookup = function(index) {
        return values[stackTop - symbolCount + 1 + index];
      };
      store = Object.create(null);
      handler = {
        apply: function(target, thisArg, args) {
          return target.apply(thisArg, args);
        },
        get: function(target, prop, receiver) {
          if (Object.prototype.hasOwnProperty.call(store, prop)) {
            return store[prop];
          }
          if (prop === 'name' || prop === 'length' || prop === 'prototype' || prop === 'caller' || prop === 'arguments') {
            return void 0;
          }
          return Reflect.get(target, prop, receiver);
        },
        set: function(target, prop, value) {
          store[prop] = value;
          return true;
        },
        has: function(target, prop) {
          return Object.prototype.hasOwnProperty.call(store, prop) || prop in target;
        },
        ownKeys: function(target) {
          return Reflect.ownKeys(store).concat(Reflect.ownKeys(target));
        },
        getOwnPropertyDescriptor: function(target, prop) {
          if (Object.prototype.hasOwnProperty.call(store, prop)) {
            return {
              value: store[prop],
              configurable: true,
              enumerable: true,
              writable: true
            };
          } else {
            return Object.getOwnPropertyDescriptor(target, prop);
          }
        }
      };
      o = new Proxy(lookup, handler);
      for (prop in directive) {
        if (!hasProp.call(directive, prop)) continue;
        value = directive[prop];
        o[prop] = value;
      }
      return this.resolve(o);
    }

    resolve(o, lookup = o) {
      var $, accessor, ensureBlock, i, item, items, len, name, nodeType, ref, ref1, ref2, resolved, resolvedValue, result, target, type;
      if (o == null) {
        // Null/undefined early return
        return o; // null/undefined early return
      }
      type = typeof o;
      // Numbers: only do 1-based lookup for positive integers
      if (type === 'number') {
        if (Number.isInteger(o) && o > 0 && typeof lookup === 'function') {
          return lookup(o - 1);
        }
        return o;
      }
      if (type === 'string' || type === 'boolean') {
        // Strings and booleans return as-is, arrays are resolved recursively
        return o;
      }
      if (Array.isArray(o)) {
        return o.map((val) => {
          return this.resolve(val, lookup);
        });
      }
      // Functions without directive markers are terminals (key fix!)
      if (type === 'function' && !((o.$ast != null) || (o.$use != null) || (o.$ary != null) || (o.$ops != null))) {
        return o;
      }
      // Objects and functions
      if (type === 'object' || type === 'function') {
        if ((o.constructor != null) && ((ref = o.constructor) !== Object && ref !== Function)) {
          return o;
        }
        $ = (val) => {
          return this.resolve(val, lookup); // Local resolver
        };
        ensureBlock = (b) => {
          b = $(b);
          if (Array.isArray(b)) {
            return new this.ast.Block(b);
          } else {
            return b;
          }
        };
        if (o.$ast != null) {
          nodeType = o.$ast;
          switch (nodeType) {
            case 'Root':
              return new this.ast.Root((function(b) {
                b.makeReturn();
                return b;
              })(new this.ast.Block($(o.body))));
            case 'IdentifierLiteral':
              return new this.ast.IdentifierLiteral($(o.value));
            case 'NumberLiteral':
              return new this.ast.NumberLiteral($(o.value));
            case 'StringLiteral':
              return new this.ast.StringLiteral(this._stripQuotes($(o.value)));
            case 'BooleanLiteral':
              return new this.ast.BooleanLiteral($(o.value));
            case 'ThisLiteral':
              return new this.ast.ThisLiteral();
            case 'NullLiteral':
              return new this.ast.NullLiteral();
            case 'UndefinedLiteral':
              return new this.ast.UndefinedLiteral();
            case 'InfinityLiteral':
              return new this.ast.InfinityLiteral();
            case 'NaNLiteral':
              return new this.ast.NaNLiteral();
            case 'Value':
              return new this.ast.Value($(o.val));
            case 'Assign':
              return new this.ast.Assign($(o.variable), $(o.value));
            case 'Op':
              return new this.ast.Op($(o.args[0]), $(o.args[1]), (o.args[2] != null ? $(o.args[2]) : void 0));
            case 'PropertyName':
              return new this.ast.PropertyName($(o.value));
            case 'Access':
              return new this.ast.Access($(o.name), {
                soak: o.soak
              });
            case 'Call':
              return new this.ast.Call($(o.variable), $(o.args));
            case 'Obj':
              return new this.ast.Obj($(o.properties), $(o.generated));
            case 'Arr':
              return new this.ast.Arr($(o.objects));
            case 'Range':
              return new this.ast.Range($(o.from), $(o.to), $(o.exclusive));
            case 'Block':
              return new this.ast.Block($(o.expressions));
            case 'Return':
              return new this.ast.Return($(o.expression));
            case 'Parens':
              return new this.ast.Parens($(o.body));
            case 'Index':
              return new this.ast.Index($(o.index));
            case 'Slice':
              return new this.ast.Slice($(o.range));
            case 'If':
              return new this.ast.If($(o.condition), $(o.body), $(o.elseBody));
            case 'While':
              return new this.ast.While($(o.condition), $(o.body));
            case 'For':
              return new this.ast.For($(o.body), $(o.source));
            case 'Switch':
              return new this.ast.Switch($(o.subject), $(o.cases), $(o.otherwise));
            case 'Try':
              return new this.ast.Try($(o.attempt), $(o.recovery), $(o.ensure));
            case 'Class':
              return new this.ast.Class($(o.variable), $(o.parent), $(o.body));
            case 'FuncGlyph':
              return new this.ast.FuncGlyph($(o.glyph));
            case 'Param':
              return new this.ast.Param($(o.name), $(o.value), $(o.splat));
            case 'Code':
              return new this.ast.Code($(o.params), ensureBlock(o.body), $(o.funcGlyph), $(o.paramStart));
            case 'Splat':
              return new this.ast.Splat($(o.name));
            case 'Existence':
              return new this.ast.Existence($(o.expression));
            case 'RegexLiteral':
              return new this.ast.RegexLiteral($(o.value));
            case 'StatementLiteral':
              return new this.ast.StatementLiteral($(o.value));
            case 'PassthroughLiteral':
              return new this.ast.PassthroughLiteral($(o.value));
            case 'Literal':
              return new this.ast.Literal($(o.value));
            default:
              console.warn("ES5Backend: Unimplemented AST node type:", nodeType);
              return new this.ast.Literal(`/* Unimplemented: ${nodeType} */`);
          }
        } else if (o.$ary != null) {
          items = $(o.$ary);
          if (Array.isArray(items)) {
            return items;
          } else {
            return [items];
          }
        } else if (o.$use != null) {
          resolvedValue = $(o.$use);
          if (o.method != null) {
            resolvedValue = (ref1 = typeof resolvedValue[name = o.method] === "function" ? resolvedValue[name]() : void 0) != null ? ref1 : resolvedValue;
          }
          return resolvedValue;
        } else if (o.$ops != null) {
          switch (o.$ops) {
            case 'value':
              // Add accessor/property to Value node
              if (o.add != null) {
                target = $(o.add[0]);
                accessor = $(o.add[1]);
                if (!(target instanceof this.ast.Value)) {
                  target = new this.ast.Value(target);
                }
                if ((accessor != null ? accessor.traverseChildren : void 0) != null) {
                  target.add([accessor]);
                }
                return target;
              } else {
                console.warn("ES5Backend: $ops value without add:", o);
                return new this.ast.Literal("/* $ops: value */");
              }
              break;
            case 'array':
              // Array operations
              if (o.append != null) {
                target = $(o.append[0]);
                items = (function() {
                  var i, len, ref2, results;
                  ref2 = o.append.slice(1);
                  results = [];
                  for (i = 0, len = ref2.length; i < len; i++) {
                    item = ref2[i];
                    if (item != null) {
                      results.push($(item));
                    }
                  }
                  return results;
                })();
                if (!Array.isArray(target)) {
                  target = [];
                }
                return target.concat(items);
              } else if (o.gather != null) {
                result = [];
                ref2 = o.gather;
                for (i = 0, len = ref2.length; i < len; i++) {
                  item = ref2[i];
                  if (!(item != null)) {
                    continue;
                  }
                  resolved = $(item);
                  if (Array.isArray(resolved)) {
                    result = result.concat(resolved);
                  } else {
                    result.push(resolved);
                  }
                }
                return result;
              } else {
                console.warn("ES5Backend: $ops array without append/gather:", o);
                return new this.ast.Literal("/* $ops: array */");
              }
              break;
            default:
              console.warn("ES5Backend: $ops not yet implemented:", o.$ops);
              return new this.ast.Literal(`/* $ops: ${o.$ops} */`);
          }
        } else {
          console.warn("ES5Backend: Unknown directive:", o);
          return new this.ast.Literal("/* Unknown directive */");
        }
      } else {
        return new this.ast.Literal("/* Unexpected input */");
      }
    }

  };

  module.exports = ES5Backend;

}).call(this);
