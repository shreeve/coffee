// Generated by CoffeeScript 2.7.0
(function() {
  // ==============================================================================
  // ES5 Backend - Solar Directive Processor for CoffeeScript
  // ==============================================================================

  // Converts Solar directives (pure data) to CoffeeScript AST node instances

  // Solar directives are generated by the parser from Solar syntax.coffee rules:
  //   o 'IDENTIFIER', $ast: 'IdentifierLiteral', value: 1

  // This backend converts those directives into actual CoffeeScript AST nodes:
  //   new nodes.IdentifierLiteral(tokenValue)

  // The resulting AST nodes use the existing CoffeeScript compiler pipeline.
  // ==============================================================================
  var ES5Backend,
    hasProp = {}.hasOwnProperty;

  ES5Backend = class ES5Backend {
    constructor(options1 = {}, ast = {}) {
      var ref, ref1;
      this.options = options1;
      this.ast = ast;
      // Use Object.create(null) to avoid prototype pollution in options
      this.compileOptions = Object.create(null);
      this.compileOptions.bare = (ref = this.options.bare) != null ? ref : true;
      this.compileOptions.header = (ref1 = this.options.header) != null ? ref1 : false;
    }

    // Helper methods (enhanced with ES6 patterns)
    _stripQuotes(value) {
      if (!((value != null ? value.length : void 0) >= 2 && typeof value === 'string')) {
        return value;
      }
      if ((value[0] === '"' && value[value.length - 1] === '"') || (value[0] === "'" && value[value.length - 1] === "'")) {
        return value.slice(1, -1);
      } else {
        return value;
      }
    }

    // Helper to ensure value is a proper node (from ES6 version)
    _ensureNode(value) {
      var node, ref;
      if (value == null) {
        return null;
      }
      if ((value != null ? value.compileToFragments : void 0) || value instanceof this.ast.Base) {
        return value;
      }
      // Handle primitives
      if ((ref = typeof value) === 'string' || ref === 'number' || ref === 'boolean') {
        node = new this.ast.Literal(String(value));
        return node;
      }
      // Handle objects with .value property
      if ((value != null ? value.value : void 0) != null) {
        node = new this.ast.PropertyName(value.value);
        return node;
      }
      return null;
    }

    // Helper to filter and ensure all items are nodes (from ES6 version)
    _filterNodes(array) {
      var i, item, len, node, result;
      if (array == null) {
        return [];
      }
      result = [];
      for (i = 0, len = array.length; i < len; i++) {
        item = array[i];
        node = item instanceof this.ast.Base ? item : this._ensureNode(item);
        if (node != null) {
          result.push(node);
        }
      }
      return result;
    }

    // Helper to convert value to a Block node (from ES6 version)
    _toBlock(value) {
      if (Array.isArray(value)) {
        return new this.ast.Block(this._filterNodes(value));
      }
      if (value instanceof this.ast.Block) {
        return value;
      }
      if (value != null) {
        return new this.ast.Block([this._ensureNode(value)]);
      }
      return new this.ast.Block([]);
    }

    // Helper for unimplemented features (avoids repeated console.warn + literal creation)
    _unimplemented(type, context = "") {
      console.warn(`ES5Backend: Unimplemented${context ? ` ${context}` : ""}:`, type);
      return new this.ast.Literal(`/* Unimplemented: ${type} */`);
    }

    reduce(values, positions, stackTop, symbolCount, directive) {
      var handler, lookup, o, prop, store, value;
      lookup = function(index) {
        return values[stackTop - symbolCount + 1 + index];
      };
      // Use Object.create(null) to avoid prototype pollution and JS property conflicts
      // This prevents conflicts with .name, .length, .constructor, .toString, etc.
      store = Object.create(null);
      handler = {
        apply: function(target, thisArg, args) {
          return target.apply(thisArg, args);
        },
        get: function(target, prop, receiver) {
          if (Object.prototype.hasOwnProperty.call(store, prop)) {
            return store[prop];
          }
          if (prop === 'name' || prop === 'length' || prop === 'prototype' || prop === 'caller' || prop === 'arguments' || prop === 'constructor' || prop === 'toString' || prop === 'valueOf') {
            // Enhanced reserved property protection using Object.create(null) approach
            return void 0;
          }
          return Reflect.get(target, prop, receiver);
        },
        set: function(target, prop, value) {
          store[prop] = value;
          return true;
        },
        has: function(target, prop) {
          return Object.prototype.hasOwnProperty.call(store, prop) || prop in target;
        },
        ownKeys: function(target) {
          return Reflect.ownKeys(store).concat(Reflect.ownKeys(target));
        },
        getOwnPropertyDescriptor: function(target, prop) {
          if (Object.prototype.hasOwnProperty.call(store, prop)) {
            return {
              value: store[prop],
              configurable: true,
              enumerable: true,
              writable: true
            };
          } else {
            return Object.getOwnPropertyDescriptor(target, prop);
          }
        }
      };
      o = new Proxy(lookup, handler);
      for (prop in directive) {
        if (!hasProp.call(directive, prop)) continue;
        value = directive[prop];
        o[prop] = value;
      }
      return this.resolve(o);
    }

    resolve(o, lookup = o) {
      var $, accessNode, accessor, actualExpression, attempt, base, body, bodyNode, bodyNodes, c, catchClause, condition, context, elseBody, ensure, error, exclusive, expression, expressionNode, finalBody, from, i, ifNode, index, indexNode, item, items, j, k, len, len1, len2, loopNode, name, name1, nodeType, options, p, properties, property, quote, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, resolved, resolvedValue, result, soak, sourceInfo, tag, target, to, type, typeToken, val, value, variable, whileNode;
      if (o == null) {
        // Null/undefined early return
        return o; // null/undefined early return
      }
      type = typeof o;
      // Numbers: only do 1-based lookup for positive integers
      if (type === 'number') {
        if (Number.isInteger(o) && o > 0 && typeof lookup === 'function') {
          return lookup(o - 1);
        }
        return o;
      }
      if (type === 'string' || type === 'boolean') {
        // Strings and booleans return as-is
        return o;
      }
      // Arrays: expand along the way - only include resolved items!
      if (Array.isArray(o)) {
        result = [];
        for (i = 0, len = o.length; i < len; i++) {
          val = o[i];
          resolved = this.resolve(val, lookup);
          if (resolved != null) {
            // Expand along the way: skip nulls at source instead of filtering later
            result.push(resolved);
          }
        }
        return result;
      }
      // Functions without directive markers are terminals (key fix!)
      if (type === 'function' && !((o.$ast != null) || (o.$use != null) || (o.$ary != null) || (o.$ops != null))) {
        return o;
      }
      // Objects and functions
      if (type === 'object' || type === 'function') {
        if ((o.constructor != null) && ((ref = o.constructor) !== Object && ref !== Function)) {
          return o;
        }
        $ = (val) => {
          return this.resolve(val, lookup); // Local resolver
        };
        if (o.$ast != null) {
          nodeType = o.$ast;
          switch (nodeType) {
            case 'Root':
              return new this.ast.Root((function(b) {
                b.makeReturn();
                return b;
              })(new this.ast.Block($(o.body))));
            case 'IdentifierLiteral':
              return new this.ast.IdentifierLiteral($(o.value));
            case 'NumberLiteral':
              return new this.ast.NumberLiteral($(o.value));
            case 'StringLiteral':
              return new this.ast.StringLiteral(this._stripQuotes($(o.value)));
            case 'BooleanLiteral':
              return new this.ast.BooleanLiteral($(o.value));
            case 'ThisLiteral':
              return new this.ast.ThisLiteral();
            case 'NullLiteral':
              return new this.ast.NullLiteral();
            case 'UndefinedLiteral':
              return new this.ast.UndefinedLiteral();
            case 'InfinityLiteral':
              return new this.ast.InfinityLiteral();
            case 'NaNLiteral':
              return new this.ast.NaNLiteral();
            case 'Value':
              // Tolerant pattern: accept either o.value OR o.val+o.properties
              base = $(o.value) || $(o.val);
              properties = $(o.properties) || [];
              // Ensure properties is an array
              properties = Array.isArray(properties) ? properties : [];
              // Value can have both base and properties (accessors)
              if (properties.length > 0) {
                return new this.ast.Value(base, this._filterNodes(properties));
              } else {
                return new this.ast.Value(base);
              }
              break;
            case 'Assign':
              variable = $(o.variable);
              value = $(o.value);
              context = $(o.context);
              // Handle object property assignments (learned from ES6 version)
              if (context === 'object' && (o.expression != null)) {
                // In object context, 'value' is the property name, 'expression' is the actual value
                variable = $(o.value); // Property name/key
                value = $(o.expression); // Actual value
                if (!(variable instanceof this.ast.Value)) {
                  // Ensure variable is properly wrapped for object context
                  variable = new this.ast.Value(variable);
                }
              }
              if (!((variable != null) && (value != null))) {
                // Skip if variable or value is null/undefined (from empty {} placeholders)
                return null;
              }
              return new this.ast.Assign(variable, value, context);
            case 'Op':
              return new this.ast.Op($(o.args[0]), $(o.args[1]), (o.args[2] != null ? $(o.args[2]) : void 0));
            case 'PropertyName':
              return new this.ast.PropertyName($(o.value));
            case 'Access':
              variable = $(o.variable);
              name = $(o.name);
              soak = $(o.soak);
              // Smart-append: if LHS is already a Value, append to its properties
              if (variable instanceof this.ast.Value) {
                accessNode = new this.ast.Access(name, {soak});
                variable.properties.push(accessNode);
                return variable; // return the same Value (now with extra segment)
              } else {
                return new this.ast.Access(name, {soak});
              }
              break;
            case 'Call':
              return new this.ast.Call($(o.variable), $(o.args));
            case 'Obj':
              return new this.ast.Obj($(o.properties), $(o.generated));
            case 'Arr':
              return new this.ast.Arr($(o.objects));
            case 'Range':
              from = $(o.from);
              to = $(o.to);
              exclusive = $(o.exclusive);
              // Range constructor expects string 'exclusive' as tag for exclusive ranges
              tag = exclusive ? 'exclusive' : null;
              return new this.ast.Range(from, to, tag);
            case 'Block':
              return new this.ast.Block($(o.expressions));
            case 'Return':
              return new this.ast.Return($(o.expression));
            case 'Parens':
              return new this.ast.Parens((ref1 = this._toBlock($(o.body))) != null ? ref1 : new this.ast.Block([new this.ast.Literal('')]));
            case 'Index':
              variable = $(o.variable) || $(o.val) || $(o.base);
              index = $(o.index) || $(o.object);
              soak = $(o.soak);
              // Smart-append: if LHS is already a Value, append to its properties
              if (variable instanceof this.ast.Value) {
                indexNode = new this.ast.Index(index, {soak});
                variable.properties.push(indexNode);
                return variable; // return the same Value (now with extra segment)
              } else {
                return new this.ast.Index(index, {soak});
              }
              break;
            case 'Slice':
              return new this.ast.Slice($(o.range));
            case 'If':
              condition = $(o.condition);
              body = this._toBlock($(o.body));
              elseBody = this._toBlock($(o.elseBody));
              // Extract the type token to determine if/unless
              typeToken = $(o.type);
              type = (typeToken != null ? typeof typeToken.toString === "function" ? typeToken.toString() : void 0 : void 0) === 'unless' ? 'unless' : 'if';
              ifNode = new this.ast.If(condition, body, {type});
              if ((elseBody != null ? (ref2 = elseBody.expressions) != null ? ref2.length : void 0 : void 0) > 0) {
                // Add else body if present
                ifNode.addElse(elseBody);
              }
              return ifNode;
            case 'While':
              condition = $(o.condition);
              body = this._toBlock($(o.body));
              // While constructor expects (condition, options)
              options = {};
              if (o.invert != null) {
                options.invert = $(o.invert);
              }
              if (o.guard != null) {
                options.guard = $(o.guard);
              }
              if (o.isLoop != null) {
                options.isLoop = $(o.isLoop);
              }
              whileNode = new this.ast.While(condition, options);
              // Set the body separately using addBody - ensure it's never null
              finalBody = body || new this.ast.Block([]);
              whileNode.addBody(finalBody);
              return whileNode;
            case 'For':
              return new this.ast.For(this._toBlock($(o.body)), $(o.source));
            case 'Switch':
              return new this.ast.Switch($(o.subject), (function() {
                var j, len1, ref3, ref4, results;
                ref4 = (ref3 = $(o.cases)) != null ? ref3 : [];
                results = [];
                for (j = 0, len1 = ref4.length; j < len1; j++) {
                  c = ref4[j];
                  if ($(c) != null) {
                    results.push($(c));
                  }
                }
                return results;
              })(), this._toBlock($(o.otherwise)));
            case 'SwitchWhen':
              return new this.ast.SwitchWhen((function() {
                var j, len1, ref3, ref4, results;
                ref4 = (ref3 = $(o.conditions)) != null ? ref3 : [];
                results = [];
                for (j = 0, len1 = ref4.length; j < len1; j++) {
                  c = ref4[j];
                  if ($(c) != null) {
                    results.push($(c));
                  }
                }
                return results;
              })(), this._toBlock($(o.block)));
            case 'Elision':
              return new this.ast.Elision();
            case 'Expansion':
              return new this.ast.Expansion();
            case 'ThisProperty':
              return new this.ast.Value(new this.ast.ThisLiteral($(o.token)), [new this.ast.Access($(o.property))]);
            case 'ComputedPropertyName':
              return new this.ast.ComputedPropertyName($(o.value));
            case 'DefaultLiteral':
              return new this.ast.DefaultLiteral($(o.value));
            case 'Try':
              attempt = this._toBlock($(o.attempt));
              // The parser uses 'catch' not 'recovery' for the catch clause
              catchClause = $(o.catch);
              ensure = this._toBlock($(o.ensure));
              // Try expects (attempt, recovery, ensure) where recovery and ensure are optional
              return new this.ast.Try(attempt, catchClause, ensure);
            case 'Class':
              return new this.ast.Class($(o.variable), $(o.parent), $(o.body));
            case 'FuncGlyph':
              return new this.ast.FuncGlyph($(o.glyph));
            case 'Param':
              return new this.ast.Param($(o.name), $(o.value), $(o.splat));
            case 'Code':
              return new this.ast.Code((function() {
                var j, len1, ref3, ref4, results;
                ref4 = (ref3 = $(o.params)) != null ? ref3 : [];
                results = [];
                for (j = 0, len1 = ref4.length; j < len1; j++) {
                  p = ref4[j];
                  if ($(p) != null) {
                    results.push($(p));
                  }
                }
                return results;
              })(), this._toBlock($(o.body)), $(o.funcGlyph), $(o.paramStart));
            case 'Splat':
              return new this.ast.Splat($(o.name));
            case 'Existence':
              return new this.ast.Existence($(o.expression));
            case 'RegexLiteral':
              return new this.ast.RegexLiteral($(o.value));
            case 'StatementLiteral':
              return new this.ast.StatementLiteral($(o.value));
            case 'PassthroughLiteral':
              return new this.ast.PassthroughLiteral($(o.value));
            case 'Interpolation':
              expression = $(o.expression);
              // Expression might be an array, so extract the first element
              actualExpression = Array.isArray(expression) && expression.length > 0 ? expression[0] : expression;
              // Handle empty interpolation specially
              // Empty interpolation should produce empty string to avoid ${} syntax error
              expressionNode = actualExpression instanceof this.ast.Base ? actualExpression : actualExpression != null ? this._ensureNode(actualExpression) : new this.ast.Literal('""');
              return new this.ast.Interpolation(expressionNode);
            case 'StringWithInterpolations':
              body = $(o.body);
              quote = $(o.quote);
              // Convert body to proper nodes - StringWithInterpolations expects a Block
              bodyNode = Array.isArray(body) ? (bodyNodes = body.map((b) => {
                if (b instanceof this.ast.Base) {
                  return b;
                } else {
                  return this._ensureNode(b);
                }
              }), new this.ast.Block(this._filterNodes(bodyNodes))) : body instanceof this.ast.Block ? body : body != null ? new this.ast.Block([this._ensureNode(body)]) : new this.ast.Block([]);
              return new this.ast.StringWithInterpolations(bodyNode, {quote});
            case 'Catch':
              // The parser uses either 'recovery' or 'body' for the catch block
              body = $(o.recovery) || $(o.body);
              // The parser uses 'variable' or 'errorVariable' for the error parameter
              error = $(o.variable) || $(o.errorVariable);
              // Ensure body is a proper Block
              bodyNode = this._toBlock(body);
              // Catch constructor expects (recovery, errorVariable)
              return new this.ast.Catch(bodyNode, error);
            case 'Throw':
              return new this.ast.Throw($(o.expression));
            case 'Literal':
              return new this.ast.Literal($(o.value));
            case 'ThisProperty':
              return new this.ast.Value(new this.ast.ThisLiteral($(o.token)), [new this.ast.Access($(o.property))]);
            case 'ComputedPropertyName':
              return new this.ast.ComputedPropertyName($(o.value));
            case 'DefaultLiteral':
              return new this.ast.DefaultLiteral($(o.value));
            case 'SwitchWhen':
              return new this.ast.SwitchWhen((function() {
                var j, len1, ref3, ref4, results;
                ref4 = (ref3 = $(o.conditions)) != null ? ref3 : [];
                results = [];
                for (j = 0, len1 = ref4.length; j < len1; j++) {
                  c = ref4[j];
                  if ($(c) != null) {
                    results.push($(c));
                  }
                }
                return results;
              })(), this._toBlock($(o.block)));
            case 'Elision':
              return new this.ast.Elision();
            case 'Expansion':
              return new this.ast.Expansion();
            default:
              return this._unimplemented(nodeType, "AST node type");
          }
        } else if (o.$ary != null) {
          items = $(o.$ary);
          // Ensure we always return an array
          items = Array.isArray(items) ? items : [items];
          // Important: filter out undefined/null items (common from optional grammar rules)
          return items.filter(function(item) {
            return item != null;
          });
        } else if (o.$use != null) {
          // Special case: $use: 'token' means get the current token's value
          if (o.$use === 'token') {
            // For THIS_PROPERTY tokens, the lookup function has the token value
            if (typeof lookup === 'function' && (lookup.value != null)) {
              resolvedValue = lookup.value;
            } else {
              // Fallback: try to get from context
              resolvedValue = (ref3 = (ref4 = lookup(0)) != null ? ref4.value : void 0) != null ? ref3 : 'unknown_token';
            }
          } else {
            resolvedValue = $(o.$use);
          }
          // Handle both 'method' (function calls) and 'prop' (property access)
          if (o.method != null) {
            resolvedValue = (ref5 = typeof resolvedValue[name1 = o.method] === "function" ? resolvedValue[name1]() : void 0) != null ? ref5 : resolvedValue;
          } else if (o.prop != null) {
            resolvedValue = (ref6 = resolvedValue[o.prop]) != null ? ref6 : resolvedValue;
          }
          return resolvedValue;
        } else if (o.$ops != null) {
          switch (o.$ops) {
            case 'value':
              // Add accessor/property to Value node
              if (o.add != null) {
                target = $(o.add[0]);
                accessor = $(o.add[1]);
                if (!(target instanceof this.ast.Value)) {
                  target = new this.ast.Value(target);
                }
                if ((accessor != null ? accessor.traverseChildren : void 0) != null) {
                  target.add([accessor]);
                }
                return target;
              } else {
                return this._unimplemented("$ops value without add", "$ops");
              }
              break;
            case 'array':
              // Array operations
              if (o.append != null) {
                target = $(o.append[0]);
                if (!Array.isArray(target)) {
                  target = [];
                }
                ref7 = o.append.slice(1);
                for (j = 0, len1 = ref7.length; j < len1; j++) {
                  item = ref7[j];
                  if (!(item != null)) {
                    continue;
                  }
                  resolved = $(item);
                  if (Array.isArray(resolved)) {
                    target = target.concat(resolved);
                  } else {
                    target.push(resolved);
                  }
                }
                return target;
              } else if (o.gather != null) {
                result = [];
                ref8 = o.gather;
                for (k = 0, len2 = ref8.length; k < len2; k++) {
                  item = ref8[k];
                  if (!(item != null)) {
                    continue;
                  }
                  resolved = $(item);
                  if (Array.isArray(resolved)) {
                    result = result.concat(resolved);
                  } else if (resolved != null) {
                    result.push(resolved);
                  }
                }
                return result;
              } else {
                return this._unimplemented("$ops array without append/gather", "$ops");
              }
              break;
            case 'if':
              // If operations for adding else clauses
              if (o.addElse != null) {
                ifNode = $(o.addElse[0]);
                elseBody = $(o.addElse[1]);
                if (ifNode instanceof this.ast.If) {
                  ifNode.addElse(elseBody);
                }
                return ifNode;
              } else {
                return this._unimplemented("$ops if without addElse", "$ops");
              }
              break;
            case 'loop':
              // Loop operations
              if (o.addSource != null) {
                loopNode = $(o.addSource[0]);
                sourceInfo = $(o.addSource[1]);
                if (loopNode) {
                  loopNode.addSource(sourceInfo);
                }
                return loopNode;
              } else if (o.addBody != null) {
                loopNode = $(o.addBody[0]);
                bodyNode = $(o.addBody[1]);
                if (loopNode) {
                  loopNode.addBody(bodyNode);
                }
                return loopNode;
              } else {
                return this._unimplemented("$ops loop without addSource/addBody", "$ops");
              }
              break;
            case 'prop':
              // Property operations (like setting soak on Index)
              if (o.set != null) {
                target = $(o.set.target);
                if ((o.set.property != null) && (target != null)) {
                  target[o.set.property] = $(o.set.value);
                }
                return target;
              } else if (o.addProp != null) {
                target = $(o.addProp[0]);
                property = $(o.addProp[1]);
                if (target instanceof this.ast.Value) {
                  target.add([property]);
                }
                return target;
              } else {
                return this._unimplemented("$ops prop without set/addProp", "$ops");
              }
              break;
            default:
              return this._unimplemented(o.$ops, "$ops type");
          }
        } else {
          // Empty objects {} are grammar placeholders - return null to signal "no value"
          if (typeof o === 'object' && o.constructor === Object && Object.keys(o).length === 0) {
            return null;
          }
          return this._unimplemented(o, "directive");
        }
      } else {
        return new this.ast.Literal("/* Unexpected input */");
      }
    }

  };

  module.exports = ES5Backend;

}).call(this);
