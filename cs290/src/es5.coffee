# ==============================================================================
# ES5 Backend - Solar Directive Processor for CoffeeScript
# ==============================================================================
#
# Converts Solar directives (pure data) to CoffeeScript AST node instances
#
# Solar directives are generated by the parser from Solar syntax.coffee rules:
#   o 'IDENTIFIER', $ast: 'IdentifierLiteral', value: 1
#
# This backend converts those directives into actual CoffeeScript AST nodes:
#   new nodes.IdentifierLiteral(tokenValue)
#
# The resulting AST nodes use the existing CoffeeScript compiler pipeline.
# ==============================================================================

class ES5Backend
  constructor: (@options = {}, @ast = {}) ->
    # @ast contains AST node class definitions (constructors)
    # @options contains compilation options, analysis settings, etc.
    @compileOptions =
      bare: @options.bare ? true
      header: @options.header ? false

  # Main entry point called by r() function in generated parser
  # Converts Solar directives to CoffeeScript AST node instances
  reduce: (values, positions, stackTop, symbolCount, directive) ->

    # Make o BOTH a function and an object:
    # o(0), o(1), o(2) - positional access
    # o.variable, o.value - semantic access
    $ = o = (index) -> values[stackTop - symbolCount + index]
    for prop, value of directive
      o[prop] = if typeof value is 'number' then o(value - 1) else value

    # Resolve Solar directive and return AST node
    @resolve o

  # Core Solar directive resolver
  resolve: (o) ->
    return $(o) if typeof o is 'number'
    return o if typeof o in ['string', 'boolean']
    return o.map (item) => @resolve item if Array.isArray o

    # Handle Solar directives (objects with special properties)
    if o? and typeof o is 'object'

      # $ast directive - create AST node
      if o.$ast?
        nodeType = o.$ast

        switch nodeType
          when 'Root'
            body = @resolve o.body
            bodyArray = if Array.isArray(body) then body else [body]
            filteredBody = bodyArray.filter (item) -> item?
            block = new @ast.Block filteredBody
            block.makeReturn() if filteredBody.length > 0  # Make final expression return
            new @ast.Root block

          when 'IdentifierLiteral' then new @ast.IdentifierLiteral o(0)
          when 'NumberLiteral'     then new @ast.NumberLiteral     o(0)
          when 'Value'             then new @ast.Value             o(0)
          when 'Assign'            then new @ast.Assign            o.variable, o.value
          when 'Op'                then new @ast.Op                o.operator, o(1), o(2)
          when 'Literal'           then new @ast.Literal           o(0)

          else
            # Fallback for unimplemented node types
            console.warn "ES5Backend: Unimplemented AST node type:", nodeType
            new @ast.Literal "/* Unimplemented: #{nodeType} */"

      # $ary directive - return array
      else if o.$ary?
        items = @resolve o.$ary
        if Array.isArray(items) then items else [items]

      # $use directive - use existing value
      # TODO: This isn't enough, see: {$use: 2, method: 'toString'}
      else if o.$use?
        @resolve o.$use

      # $ops directive - operation (array append, etc.)
      else if o.$ops?
        console.warn "ES5Backend: $ops not yet implemented:", o.$ops
        new @ast.Literal "/* $ops: #{o.$ops} */"

      else
        # Unknown directive
        console.warn "ES5Backend: Unknown directive:", o
        new @ast.Literal "/* Unknown directive */"

    else
      # Fallback for unexpected input
      new @ast.Literal "/* Unexpected input */"

module.exports = ES5Backend
