# ==============================================================================
# ES5 Backend - Solar Directive Processor for CoffeeScript
# ==============================================================================
#
# Converts Solar directives (pure data) to CoffeeScript AST node instances
#
# Solar directives are generated by the parser from Solar syntax.coffee rules:
#   o 'IDENTIFIER', $ast: 'IdentifierLiteral', value: 1
#
# This backend converts those directives into actual CoffeeScript AST nodes:
#   new nodes.IdentifierLiteral(tokenValue)
#
# The resulting AST nodes use the existing CoffeeScript compiler pipeline.
# ==============================================================================

class ES5Backend
  constructor: (@options = {}, @ast = {}) ->
    # @ast contains AST node class definitions (constructors)
    # @options contains compilation options, analysis settings, etc.
    @compileOptions =
      bare: @options.bare ? true
      header: @options.header ? false

  # Main entry point called by r() function in generated parser
  # Converts Solar directives to CoffeeScript AST node instances
  reduce: (values, positions, stackTop, symbolCount, directive) ->
    # Build frame from parser stacks (same pattern as working implementation)
    frame = []
    for i in [0...symbolCount]
      offset = stackTop - symbolCount + i + 1
      frame.push {
        value: values[offset]
        pos: positions[offset]
      }

    # Evaluate Solar directive and return AST node
    @evaluateDirective directive, frame

  # Core Solar directive evaluator
  evaluateDirective: (directive, frame) ->

    # Handle position references (1, 2, 3, ...)
    if typeof directive is 'number'
      return frame[directive - 1]?.value  # 1-based â†’ 0-based

    # Handle primitives
    return directive if typeof directive in ['string', 'boolean']

    # Handle arrays
    if Array.isArray directive
      return directive.map (item) => @evaluateDirective item, frame

    # Handle Solar directives (objects with special properties)
    if directive? and typeof directive is 'object'

      # $ast directive - create AST node
      if directive.$ast?
        nodeType = directive.$ast

        switch nodeType
          when 'Root'
            body = @evaluateDirective directive.body, frame
            bodyArray = if Array.isArray(body) then body else [body]
            filteredBody = bodyArray.filter (item) -> item?
            block = new @ast.Block filteredBody
            block.makeReturn() if filteredBody.length > 0  # Make final expression return
            new @ast.Root block

          when 'IdentifierLiteral'
            value = @evaluateDirective directive.value, frame
            new @ast.IdentifierLiteral value

          when 'NumberLiteral'
            value = @evaluateDirective directive.value, frame
            new @ast.NumberLiteral value

          when 'Value'
            val = @evaluateDirective directive.val, frame
            new @ast.Value val

          when 'Literal'
            value = @evaluateDirective directive.value, frame
            new @ast.Literal value

          else
            # Fallback for unimplemented node types
            console.warn "ES5Backend: Unimplemented AST node type:", nodeType
            new @ast.Literal "/* Unimplemented: #{nodeType} */"

      # $ary directive - return array
      else if directive.$ary?
        items = @evaluateDirective directive.$ary, frame
        if Array.isArray(items) then items else [items]

      # $use directive - use existing value
      else if directive.$use?
        @evaluateDirective directive.$use, frame

      # $ops directive - operation (array append, etc.)
      else if directive.$ops?
        console.warn "ES5Backend: $ops not yet implemented:", directive.$ops
        new @ast.Literal "/* $ops: #{directive.$ops} */"

      else
        # Unknown directive
        console.warn "ES5Backend: Unknown directive:", directive
        new @ast.Literal "/* Unknown directive */"

    else
      # Fallback for unexpected input
      new @ast.Literal "/* Unexpected input */"

module.exports = ES5Backend
