// Generated by CoffeeScript 2.8.0
import CoffeeScript from './coffeescript.js';
import * as helpersModule from './helpers.js';
import fs from 'fs';
import vm from 'vm';
import path from 'path';
import Module from 'module';

const hasProp = {}.hasOwnProperty;



CoffeeScript.run = function(code, options = {}) {
  let filename = options.filename ? fs.realpathSync(options.filename) : helpersModule.anonymousFileName();
  if (options.filename) {
    process.argv[1] = filename;
  }
  options.filename = filename;
  options.inlineMap = true;
  options.bare = true;
  let answer = CoffeeScript.compile(code, options);
  code = (ref = answer.js) != null ? ref : answer;
  return vm.runInThisContext(code, {filename});
};

CoffeeScript.eval = function(code, options = {}) {
  if (!(code = code.trim())) {
    return;
  }
  let createContext = (ref = vm.Script.createContext) != null ? ref : vm.createContext;
  let isContext = (ref1 = vm.isContext) != null ? ref1 : function(ctx) {
    return options.sandbox instanceof createContext().constructor;
  };
  let sandbox;
  if (createContext) {
    if (options.sandbox != null) {
      if (isContext(options.sandbox)) {
        sandbox = options.sandbox;
      } else {
        sandbox = createContext();
        const ref2 = options.sandbox;
/* DEFPART_MARKER */
        for (let k in ref2) {
          if (!hasProp.call(ref2, k)) continue;
          let v = ref2[k];
          sandbox[k] = v;
        }
      }
      sandbox.global = sandbox.root = sandbox.GLOBAL = sandbox;
    } else {
      sandbox = global;
    }
    sandbox.__filename = options.filename || 'eval';
    sandbox.__dirname = path.dirname(sandbox.__filename);
  }
  let o = {};
/* DEFPART_MARKER */
  for (let k in options) {
    if (!hasProp.call(options, k)) continue;
    let v = options[k];
    o[k] = v;
  }
  o.bare = true;
  let js = CoffeeScript.compile(code, o);
  if (sandbox === global) {
    return vm.runInThisContext(js);
  } else {
    return vm.runInContext(js, sandbox);
  }
};

CoffeeScript.register = function() {
  throw new Error('CoffeeScript.register() is not yet supported in ES6 module mode. Please use CommonJS mode for register functionality.');
};


export default CoffeeScript;
export const helpers = helpersModule;
export const VERSION = CoffeeScript.VERSION;
export const FILE_EXTENSIONS = CoffeeScript.FILE_EXTENSIONS;
export const compile = CoffeeScript.compile;
export const tokens = CoffeeScript.tokens;
export const nodes = CoffeeScript.nodes;
export const patchStackTrace = CoffeeScript.patchStackTrace;
export const registerCompiled = CoffeeScript.registerCompiled;
export const run = CoffeeScript.run;
export const evaluate = CoffeeScript.eval;
export const register = CoffeeScript.register;
