// Generated by CoffeeScript 2.9.0
import * as CoffeeScript from './coffeescript.js';
import fs from 'fs';
import vm from 'vm';
import path from 'path';
import Module from 'module';



const helpers = CoffeeScript.helpers;

CoffeeScript.run = function(code, options = {}) {
  const mainModule = process.mainModule || {};
  mainModule.filename = process.argv[1] = options.filename ? fs.realpathSync(options.filename) : helpers.anonymousFileName();
  mainModule.moduleCache = mainModule.moduleCache && {};
  const dir = options.filename != null ? path.dirname(fs.realpathSync(options.filename)) : fs.realpathSync('.');
  mainModule.paths = Module._nodeModulePaths(dir);
  mainModule.options = options;
  options.filename = mainModule.filename;
  options.inlineMap = true;
  const answer = CoffeeScript.compile(code, options);
  code = (ref = answer.js) != null ? ref : answer;
  return mainModule._compile(code, mainModule.filename);
};

CoffeeScript.eval = function(code, options = {}) {
  if (!(code = code.trim())) {
    return;
  }
  const createContext = vm.Script.createContext != null ? vm.Script.createContext : vm.createContext;
  const isContext = vm.isContext != null ? vm.isContext : function(ctx) {
    return options.sandbox instanceof createContext().constructor;
  };
  if (createContext) {
    if (options.sandbox != null) {
      if (isContext(options.sandbox)) {
        let sandbox = options.sandbox;
      } else {
        sandbox = createContext();
        const ref2 = options.sandbox;
        for (let k in ref2) {
          if (!hasProp.call(ref2, k)) continue;
          const v = ref2[k];
          sandbox[k] = v;
        }
      }
      sandbox.global = sandbox.root = sandbox.GLOBAL = sandbox;
    } else {
      sandbox = global;
    }
    sandbox.__filename = options.filename || 'eval';
    sandbox.__dirname = path.dirname(sandbox.__filename);
    if (!(sandbox !== global || sandbox.module || sandbox.require)) {
      const _module = new Module(options.modulename || 'eval');
      sandbox.module = _module;
      const _require = function(path) {
        return Module._load(path, _module, true);
      };
      sandbox.require = _require;
      _module.filename = sandbox.__filename;
      _require.paths = _module.paths = Module._nodeModulePaths(process.cwd());
      _require.resolve = function(request) {
        return Module._resolveFilename(request, _module);
      };
    }
  }
  const o = {};
  for (let k in options) {
    if (!hasProp.call(options, k)) continue;
    const v = options[k];
    o[k] = v;
  }
  o.bare = true;
  const js = CoffeeScript.compile(code, o);
  if (sandbox === global) {
    return vm.runInThisContext(js);
  } else {
    return vm.runInContext(js, sandbox);
  }
};

if (require.extensions) {
  const ref = CoffeeScript.FILE_EXTENSIONS;
  for (let i = 0, len = ref.length; i < len; i++) {
    const ext = ref[i];
    (function(ext) {
      return (base = require.extensions)[ext] != null ? base[ext] : base[ext] = function() {
        throw new Error(`ES6 modules do not support runtime .coffee file loading. Please compile .coffee files to .js first.`);
      };
    })(ext);
  }
}

CoffeeScript._compileRawFileContent = function(raw, filename, options = {}) {
  const stripped = raw.charCodeAt(0) === 0xFEFF ? raw.substring(1) : raw;
  options = Object.assign({}, options, {
    filename: filename,
    literate: helpers.isLiterate(filename),
    sourceFiles: [filename]
  });
  try {
    const answer = CoffeeScript.compile(stripped, options);
  } catch (error) {
    const err = error;
    throw helpers.updateSyntaxError(err, stripped, filename);
  }
  return answer;
};

CoffeeScript._compileFile = function(filename, options = {}) {
  const raw = fs.readFileSync(filename, 'utf8');
  return CoffeeScript._compileRawFileContent(raw, filename, options);
};

export default CoffeeScript;

export {
  VERSION,
  FILE_EXTENSIONS,
  helpers,
  registerCompiled,
  compile,
  tokens,
  parseNodes as nodes,
  patchStackTrace
} from './coffeescript.js';

const coffeeEval = CoffeeScript.eval;

const coffeeRun = CoffeeScript.run;

const coffeeCompileRawFileContent = CoffeeScript._compileRawFileContent;

const coffeeCompileFile = CoffeeScript._compileFile;

export {
  coffeeEval as eval,
  coffeeRun as run,
  coffeeCompileRawFileContent as _compileRawFileContent,
  coffeeCompileFile as _compileFile
};
