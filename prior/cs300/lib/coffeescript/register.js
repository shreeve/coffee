// Generated by CoffeeScript 2.7.0
import CoffeeScript from './index.js';
import child_process from 'child_process';
import * as helpers from './helpers.js';
import path from 'path';
import { createRequire } from 'module';
import { fileURLToPath } from 'url';

const require = createRequire(import.meta.url);
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const {patchStackTrace} = CoffeeScript;

let cacheSourceMaps, nodeSourceMapsSupportEnabled, loadFile, findExtension, fork, getRootModule, binary;

// Check if Node's built-in source map stack trace transformations are enabled.
nodeSourceMapsSupportEnabled = (typeof process !== "undefined" && process !== null) && (process.execArgv.includes('--enable-source-maps') || (process.env.NODE_OPTIONS?.includes('--enable-source-maps')));

if (!(Error.prepareStackTrace || nodeSourceMapsSupportEnabled)) {
  cacheSourceMaps = true;
  patchStackTrace();
}

// Load and run a CoffeeScript file for Node, stripping any `BOM`s.
loadFile = function(module, filename) {
  let js, options;
  options = module.options || getRootModule(module).options || {};
  // Currently `CoffeeScript.compile` caches all source maps if present. They
  // are available in `getSourceMap` retrieved by `filename`.
  if (cacheSourceMaps || nodeSourceMapsSupportEnabled) {
    options.inlineMap = true;
  }
  js = CoffeeScript._compileFile(filename, options);
  return module._compile(js, filename);
};

// If the installed version of Node supports `require.extensions`, register
// CoffeeScript as an extension.
if (require.extensions) {
  const ref1 = CoffeeScript.FILE_EXTENSIONS;
  for (let i = 0, len = ref1.length; i < len; i++) {
    const ext = ref1[i];
    require.extensions[ext] = loadFile;
  }
  // Patch Node's module loader to be able to handle multi-dot extensions.
  // This is a horrible thing that should not be required.
  const Module = require('module');
  findExtension = function(filename) {
    let curExtension, extensions;
    extensions = path.basename(filename).split('.');
    if (extensions[0] === '') {
      // Remove the initial dot from dotfiles.
      extensions.shift();
    }
    // Start with the longest possible extension and work our way shortwards.
    while (extensions.shift()) {
      curExtension = '.' + extensions.join('.');
      if (Module._extensions[curExtension]) {
        return curExtension;
      }
    }
    return '.js';
  };
  Module.prototype.load = function(filename) {
    let extension;
    this.filename = filename;
    this.paths = Module._nodeModulePaths(path.dirname(filename));
    extension = findExtension(filename);
    Module._extensions[extension](this, filename);
    return this.loaded = true;
  };
}

// If we're on Node, patch `child_process.fork` so that Coffee scripts are able
// to fork both CoffeeScript files, and JavaScript files, directly.
if (child_process) {
  ({fork} = child_process);
  try {
    binary = require.resolve('../../bin/coffee.js');
  } catch {
    // Fallback to coffee if coffee.js doesn't exist
    binary = require.resolve('../../bin/coffee');
  }
  child_process.fork = function(path, args, options) {
    if (helpers.isCoffee(path)) {
      if (!Array.isArray(args)) {
        options = args || {};
        args = [];
      }
      args = [path].concat(args);
      path = binary;
    }
    return fork(path, args, options);
  };
}

// Utility function to find the `options` object attached to the topmost module.
getRootModule = function(module) {
  if (module.parent) {
    return getRootModule(module.parent);
  } else {
    return module;
  }
};

export default loadFile;